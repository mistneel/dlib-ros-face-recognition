#!/usr/bin/env python

from face_recognition_ros_wrapper.srv import RegisterNewFace, RegisterNewFaceResponse
from imutils import paths
import rospy
import cv2
import face_recognition
import pickle
import os
import json
from collections import defaultdict


def handle_register_new_face(req):

	dataset = rospy.get_param('~dataset', '/home/neel/Downloads/train')
	encodingFile = rospy.get_param('~encodings', '/home/neel/catkin_ws/src/face_recognition_ros_wrapper/resources/')
    	method = rospy.get_param('~method', 'hog')
    	info = rospy.get_param('~info', '/home/neel/catkin_ws/src/face_recognition_ros_wrapper/info.json')
    	rospy.loginfo("avatar: rebuild_database_server called with dataset {dataset} {info} {encodingFile} method {method}")

	print("t")
	success = False
	
	imagepaths = list(paths.list_images(dataset))##req.image_path))
	knownEncodings = []
	knownNames=[]

	print("u")

	 # read in the info file (a json dictionary) 
    	with open(info) as json_file:
        	data = json.load(json_file)
    	rospy.loginfo("avatar: rebuild_database_server loaded the info file from {info}")
    	print(data)
	print("v")
	for (i, imagepath) in enumerate(imagepaths):
		name = imagepath.split(os.path.sep)[-2]
		image = cv2.imread(imagepath)
    		rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

		boxes = face_recognition.face_locations(rgb, model=method)
        	encodings = face_recognition.face_encodings(rgb, boxes)

		for encoding in encodings:
			knownEncodings.append(encoding)
     			knownNames.append(name)


	print("[INFO] serializing encodings...")
	data = {"encodings": knownEncodings, "names": knownNames, "info": data}
	print("a")
	f = open("encodings.pickle", "wb")
	print("b")
	f.write(pickle.dumps(data))
	print("c")
	f.close()
	print("d")
	success = True
	print("e")


	return RegisterNewFaceResponse(success)



def warn():
    rospy.loginfo("avatar: rebuild_database_server shutting down (killed)")


def register_new_face_server():
    rospy.init_node("register_new_face_server")
    print("z")
    rospy.Service('register_new_face', RegisterNewFace, handle_register_new_face)
    print("Ready to register new faces")
    rospy.on_shutdown(warn)
    try :
        rospy.spin()
    except rospy.ROSInterruptException:
        pass


if __name__ == "__main__":
    register_new_face_server()





